<?xml version="1.0" encoding="UTF-8"?>

<?xml-stylesheet type="text/css" href="chrome://global/skin/" ?>
<?xml-stylesheet type="text/css" href="chrome://userchromejs/skin/rebuild_userChrome.css" ?>

<overlay id="userChromejs-browser-overlay"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
<!--
// ==UserScript==
// @name           rebuild_userChrome.uc.xul
// @namespace      https://g.mozest.com/thread-41292-1-4
// @description    UserChromeJS脚本管理器Dannylee强化版
// @include        main
// @compatibility  Firefox 3.5b4pre 3.6a1pre 4.0b7pre
// @author 				 Alice0775
// @version        2014/02/24 00:00 by dannylee UI add switch button between toolsmenu and toolbutton
// @version        2014/02/15 00:00 by dannylee rebuild a simple UI , add custom functions for script-cmd, add toolbutton click functions
// @version        2013/04/08 13:38 by dannylee
// @version        2013/03/22 08:02 Added "use strict"
// @version        2013/03/22 08:01 Fixed commands to work properly, even if menus had been moved into other place
// @version        2013/03/22 08:00 Fixed dragdrop target
// @version        2013/03/20 24:00 autocheck=false for script menu
// @version        2012/11/30 22:00 ubuntu12.04.1 "chromeフォルダを開く" に失敗することがあるのを修正
// ==/UserScript==
// @version        2012/09/30 09:00 ubuntu12.04.1 "chromeフォルダを開く" に失敗することがあるのを修正
// @version        2012/02/25 23:00 restart
// @version        2010/10/25 22:00 Bug 574688 adon bar
// @version        2010/07/04 00:00 nsDragAndDrop
// @version        2009/11/14 00:00 Seamonkeyに対応
// @version        2009/08/24 00:00 Namoroka3.6a2pre で右クリックでのスクリプト編集時にコンテキストメニューが表示されるのを修正
// @version        2009/04/10 00:00 Minefield3.6a1pre での動作改善
// @version        2009/03/27 00:00 nsIProcess変更
// @version        2008/02/25 00:00 reuseのデフォルト値trueに変更
// @version        2008/01/09 02:00 スクリプト保存ファイルピッカーをキャンセル時のエラー処理追加
// @version        2008/01/04 16:00 スクリプトのドロップをstatusbar-display上に変更
// @version        2007/12/15 18:00 base64データスキームの保存に対応
// @version        2007/12/15 02:00 ttp://の保存に対応
// @version        2007/12/15 01:00 メニューが表示されない場合があるのを修正
// @version        2007/12/14 23:00 saveFolderModokiがある時スクリプトのリンクをステータスバーの左1/3にドロップすることで, chrmeホルダに保存するようにした
// @version        2007/12/14 19:00 日本語のファイル名のスクリプトの有効/無効が機能していなかったのを修正
// @version        2007/12/14 17:00 スクリプトの有効/無効/編集を設定できるようにした
// @Note           使用するエディタを編集しておくこと
// @Note           Required Sub-Script/Overlay Loader v3.0.38mod( https://github.com/alice0775/userChrome.js/blob/master/userChrome.js )
 -->

<script type="application/javascript" xmlns="http://www.w3.org/1999/xhtml"><![CDATA[

	"use strict";
  var userChromejs = {
// --- config ---
    editor: "C:\\Program\\notepad.exe",
    //dannylee
    UIPREF: "userChromeJS.rebuildUI.showtoolbutton",
    ShowToolButton: true,
    homebtnclick: null,
    //end
    // editor: "/usr/bin/gedit",
// --- config ---
    _statusDisplay: null,

  
    get statusDisplay() {
      if (!this._statusDisplay)
        this._statusDisplay = document.getElementById('status-bar') ||
                              document.getElementById('statusbar-display');
      return this._statusDisplay;
    },

    _addonbar: null,
    get addonbar() {
      if (!this._addonbar) {
        this._addonbar = document.getElementById('addon-bar');
        //for FF29+ by Dannylee
        if (!this._addonbar)
          this._addonbar = document.getElementById('UC-addon-bar');
      }
      return this._addonbar;
    },

    handleEvent: function(event) {
      switch(event.type) {
        case 'dragover':
          this.dragover(event);
          break;
        case 'drop':
          this.drop(event);
          break;
        case 'unload':
          this.uninit();
          break;
      }
    },
    
    init: function(){
      window.addEventListener("unload",this , false);
      // if ("nsDragAndDrop" in window && this.statusDisplay) {
      //   this.statusDisplay.addEventListener('dragover',function(event){nsDragAndDrop.dragOver(event,userChromejs.dndObserver);},true);
      //   this.statusDisplay.addEventListener('dragdrop',function(event){nsDragAndDrop.drop(event,userChromejs.dndObserver);},true);
      // } else if(this.addonbar) {
      //   this.addonbar.addEventListener('dragover', this ,true);
      //   this.addonbar.addEventListener('drop', this ,true);
      // }
      this.addPrefListener(userChromejs.readLaterPrefListener); // 登録処理
      
      //dannylee
      var menuitem = document.createElement("menu");
  		menuitem.setAttribute("id", "userChromejs_Tools_Menu");
  		menuitem.setAttribute("label", "UC脚本管理器");
  		menuitem.setAttribute("class", "menu-iconic");

  		var ins = document.getElementById("menu_ToolsPopup");
  		ins.insertBefore(menuitem, document.getElementById("menu_preferences"));
  		//ins.appendChild(menuitem);
      
      //dannylee
      if (!gPrefService.prefHasUserValue(this.UIPREF)) {
         gPrefService.setBoolPref(this.UIPREF, true);
      }
      
    },
    
    Openchromedir: function() {
      Components.classes["@mozilla.org/file/directory_service;1"].getService(Components.interfaces.nsIProperties).get("UChrm", Components.interfaces.nsILocalFile).launch();
    },
    
    uninit: function(){
      // if ("nsDragAndDrop" in window && this.statusDisplay) {
      //   this.statusDisplay.removeEventListener('dragover',function(event){nsDragAndDrop.dragOver(event,userChromejs.dndObserver);},true);
      //   this.statusDisplay.removeEventListener('dragdrop',function(event){nsDragAndDrop.drop(event,userChromejs.dndObserver);},true);
      // } else if(this.addonbar) {
      //   this.addonbar.removeEventListener('dragover', this ,true);
      //   this.addonbar.removeEventListener('drop', this ,true);
      // }
      this.removePrefListener(userChromejs.readLaterPrefListener); // 登録解除
    },

    dragover: function(event) {
      var dragService = Cc["@mozilla.org/widget/dragservice;1"]
                        .getService(Ci.nsIDragService);
      var dragSession = dragService.getCurrentSession();
      var supportedTypes = ["text/x-moz-url", "text/unicode", "application/x-moz-file"];
      for each (var type in supportedTypes) {
        if (event.dataTransfer.types.contains(type)) {
          var data = event.dataTransfer.getData(type);
          var url = (/^\s*(.*?)\s*$/m.test(data))
                     ? RegExp.$1 : null;
          if (/(\.uc\.js|\.uc\.xul|\.uc\.xul\.txt)$/.test(url)) {
            dragSession.canDrop = true;
            event.preventDefault();
            return;
          }
        }
      }
    },

    drop: function(event) {
      var dragService = Cc["@mozilla.org/widget/dragservice;1"]
                        .getService(Ci.nsIDragService);
      var dragSession = dragService.getCurrentSession();
      var supportedTypes = ["text/x-moz-url", "text/unicode", "application/x-moz-file"];
      for each (var type in supportedTypes) {
        if (event.dataTransfer.types.contains(type)) {
          var data = event.dataTransfer.getData(type);
          this.dndObserver.onDrop(event, {data: data}, dragSession);
          return;
        }
      }
    },

    dragDropSecurityCheck: function dragDropSecurityCheck(event, dragSession, url) {
      if (!url)
        return false;

      // need to do a security check to make
      // sure the source document can load the dropped URI.
      url = url.replace(/^\s*|\s*$/g, '');

      if (url.indexOf('chrome://') == 0 || url.indexOf('file://') == 0)
        return url;

      // urlSecurityCheck
      try {
        urlSecurityCheck(url, gBrowser.contentPrincipal, Ci.nsIScriptSecurityManager.DISALLOW_INHERIT_PRINCIPAL);
      }
      catch(e) {
        event.stopPropagation();
        //throw 'Drop of ' + url + ' denied.';
        return false;
      }
      return url;
    },

    dndObserver: {
      getSupportedFlavours : function () {
        var flavours = new FlavourSet();
        flavours.appendFlavour("text/x-moz-url");
        flavours.appendFlavour("text/unicode");
        flavours.appendFlavour("application/x-moz-file");
        return flavours;
      },
      onDragOver: function (evt,flavour,session){},
      onDrop: function (evt,dropdata,session){
        var fname;
        evt.stopPropagation();
        evt.preventDefault();
        if (dropdata.data!=""){
          //ステータスバーの左1/3にドロップしたか
          var target = evt.target;
          while(target){
            if(target == userChromejs.statusDisplay ||
               target == userChromejs.addonbar)
              break;
            target = target.parentNode;
          }
          if(!target) return;
          if(evt.screenX > target.boxObject.screenX + target.boxObject.width/3) return;

          //saveFolderModokiが必要
          if(!saveFolderModoki) return;
          //ドロップしたurl
          var url = (/^\s*(.*?)\s*$/m.test(dropdata.data))?RegExp.$1:null;
          //保存ホルダ nsIFile
          var folder = Components.classes["@mozilla.org/file/directory_service;1"]
                             .getService(Components.interfaces.nsIProperties)
                             .get("UChrm", Components.interfaces.nsIFile);
          //デフォルトのファイル名
          if(/(.*)\n?(.*)?/m.test(dropdata.data) )
            fname = RegExp.$2?RegExp.$2:"";
          //データスキームか
          if(/(^data:text\/javascript(;.*)?,?)|(^data:application\/x-javascript(;.*)?,?)/.test(url)){
            // urlSecurityCheck は saveFolderModoki.directSaveLinkで実施している
            saveScript(url, fname, folder);
          }else{
            //リンクか
            if(!/(^h?ttps?:\/\/)|(^ftp:\/\/)/.test(url)) return;
            if (/^h?.?.p(s?):(.+)$/i.test(url)){
              url = "http" + RegExp.$1 + ':' + RegExp.$2;
              if(!RegExp.$2) return null;
              fname = url.match(/.+\/(.+)$/)[1];
            }
            fname = fname.replace(/\.uc\.xul\.txt$/,'.uc.xul');
            //スクリプトファイルか?
            if(/(\.uc\.js|\.uc\.xul|\.uc\.xul\.txt)$/.test(url)){
              if (typeof gBrowser.dragDropSecurityCheck == 'function')
                gBrowser.dragDropSecurityCheck(evt, session, url);
              else {
                userChromejs.dragDropSecurityCheck(evt, session, url)
              }
              saveScript(url, fname, folder);
            }
          }
        }
        function saveScript(url, fname, folder){
          //ファイルピッカによりnsIFile決定
          var aFile = getFolderPath(fname, folder)
          if(!aFile) return;
          //フォルダパス
          folder = aFile.path.replace(aFile.leafName,'');
          //nsILocalFileのフォルダ
          var aFolder = saveFolderModoki.initFileWithPath(folder);
          if(!aFolder) return;
          //リンクを保存
          saveFolderModoki.directSaveLink(null, url, aFile.leafName, gBrowser.currentURI, aFolder);
        }
        function getFolderPath(fname, folder){
          //ファイルピッカにより保存先決定
          var fp = Components.classes['@mozilla.org/filepicker;1']
                    .createInstance(Components.interfaces.nsIFilePicker);
            fp.init(window, "Save script As", fp.modeSave);
            fp.appendFilter("Script Files","*.uc.js; *.uc.xul");
          if(/\.uc\.js$/.test(fname)){
            fp.defaultExtension = "uc.js";
            fp.defaultString = fname;
          }else if(/\.uc\.xul$/.test(fname)){
            fp.defaultExtension = "uc.xul";
            fp.defaultString = fname;
          }else{
            fp.defaultExtension = "uc.js";
            fp.defaultString = fname + ".uc.js";
          }
          fp.displayDirectory = folder;
          if ( fp.show() == fp.returnCancel || !fp.file ) return;
          //nsIFile
          return fp.file;
        }
      }
    },

    rebuild: function(){
      var flag = this.getPref("userChrome.enable.reuse",'bool',true);
      this.setPref("userChrome.enable.reuse",'bool',false);
      setTimeout(function(){OpenBrowserWindow();},  0);

      setTimeout(function(self, flag) {
          self.setPref("userChrome.enable.reuse", 'bool', flag);

          var isCloseWindow = self.getPref("userChrome.closeWindow", 'bool', false);
          if (isCloseWindow)
            window.close();
      }, 2000, this, flag);
    },
    setting: function(){
      var flag = this.getPref("userChrome.enable.reuse",'bool',true);
      this.setPref("userChrome.enable.reuse",'bool',!flag);
    },
    //dannylee
    settingHomeMode: function(){
      var flag = this.getPref("userChrome.enable.uerHomebutton",'bool',false);
      this.setPref("userChrome.enable.uerHomebutton",'bool',!flag);
    },//
    openPrefs: function() {
      openDialog(
                'chrome://userChromejs/content/options.xul',
                'chrome,titlebar,toolbar,centerscreen,dialog=no');
    },
    onpopup: function(){
      var menu,
          flag;
      // flag = this.getPref("userChrome.enable.reuse",'bool',true);
      // var menuitem = document.getElementById('userChrome_setting');
      // menuitem.setAttribute('checked', !flag);
      
      //dannylee
      flag = this.getPref("userChrome.enable.uerHomebutton",'bool',false);
      var menuitem = document.getElementById('userChrome_homebtn');
      menuitem.setAttribute('checked', flag);//
      if (!document.getElementById("home-button"))
        menuitem.setAttribute("disabled", true);

      var menupopup = document.getElementById("userChromejs_options");

      // remove script menuitem
      var nodes = menupopup.querySelectorAll('.userChromejs_script');
      for(var i = 0, len = nodes.length; i < len; i++){
        nodes[i].parentNode.removeChild(nodes[i]);
      }

      menuitem = document.createElement('menuitem');
      menuitem.setAttribute('class','userChromejs_script');
      menuitem.setAttribute('label','启用 Chrome 下所有目录');
      menuitem.setAttribute('oncommand','userChromejs.chgDirStat("*");');
      menuitem.setAttribute('onclick','if(event.button != 0) {event.stopPropagation();event.preventDefault();userChromejs.clickDirMenuitem(event,true);}');
      menuitem.setAttribute('type','checkbox');
      menuitem.setAttribute('checked', !userChrome_js.dirDisable['*']);
      // menuitem.setAttribute('disabled',true);
      menuitem.dirName = '*';
      menupopup.appendChild(menuitem);

      let parentMenuPopup = menupopup,
          topMenuitems = [];

      let getTooltiptext = function(script, url) {
        let text = script.description || '';
        if (url) {
          text += '\n' + url;
        }
        return text;
      };

      for(var j = 0, lenj = userChrome_js.arrSubdir.length; j < lenj; j++){
        var dirName = userChrome_js.arrSubdir[j] == "" ? "root" : userChrome_js.arrSubdir[j];
        var flg = false;
        for(var i = 0, len = userChrome_js.scripts.length; i < len; i++){
          var script = userChrome_js.scripts[i];
          if(script.dir != dirName) continue;
          flg = true;
          break;
        }
        if(!flg){
          for(var i = 0, len = userChrome_js.overlays.length; i < len; i++){
            var script = userChrome_js.overlays[i];
            if(script.dir != dirName) continue;
            flg = true;
            break;
          }
        }
        if(!flg) continue;

        menu = document.createElement('menu');
        menu.setAttribute('class','userChromejs_script');
        menu.setAttribute('label','脚本目录 ' + (dirName=="root"?"":dirName) );
        menu.setAttribute('onclick','if(event.button != 0) {event.stopPropagation();event.preventDefault();userChromejs.clickDirMenu(event);}');
        if(userChrome_js.dirDisable[dirName])
          menu.setAttribute('style', 'font-style:italic;');
        menu.dirName = dirName;

        menupopup = document.createElement('menupopup');
        menupopup.setAttribute('onpopupshowing','event.stopPropagation();');

        menuitem = document.createElement('menuitem');
        // menuitem.setAttribute('label','是否启用chrome/' + (dirName=="root"?"":dirName) + '目录下全部脚本');
        menuitem.setAttribute('label','是否启用 ' + (dirName=="root"?"":dirName) + ' 目录下全部脚本');
        menuitem.setAttribute('oncommand', 'userChromejs.chgDirStat(this.dirName);');
        menuitem.setAttribute('onclick','if(event.button != 0) {event.stopPropagation();event.preventDefault();userChromejs.clickDirMenuitem(event);}');
        menuitem.setAttribute('type', 'checkbox');
        menuitem.setAttribute('checked', !userChrome_js.dirDisable[dirName]);
        menuitem.dirName = dirName;
        menupopup.appendChild(menuitem);

        if (dirName === 'root') {
          menu.setAttribute('hidden', true);
          menuitem.setAttribute('hidden', true);
        }

        var menuseparator = document.createElement('menuseparator');
        menupopup.appendChild(menuseparator);

        var flg = false;
        for(var i = 0, len = userChrome_js.scripts.length; i < len; i++){
          var script = userChrome_js.scripts[i];
          if(script.dir != dirName) continue;
            flg = true;
            menuitem = document.createElement('menuitem');
            menuitem.setAttribute('label',script.filename);
            menuitem.setAttribute('oncommand','userChromejs.script.toggleScript(this.script);');
            menuitem.setAttribute('onclick','if(event.button != 0) {event.stopPropagation();event.preventDefault();userChromejs.clickScriptMenu(event);}');
            menuitem.setAttribute('type','checkbox');
            menuitem.setAttribute('autocheck','false');
            menuitem.setAttribute('checked', !userChrome_js.scriptDisable[script.filename]);
            menuitem.setAttribute('restartless', script.restartless);

            let url = this.getScriptHomeURL(script);
            if (url)
              menuitem.setAttribute('homeURL', url);
            let description = getTooltiptext(script, url);
            if(description)
              menuitem.setAttribute('tooltiptext', description);

            menuitem.script = script;
            if (dirName === 'root') {
              menuitem.setAttribute('class','userChromejs_script');
              topMenuitems.push(menuitem);
            } else {
              menupopup.appendChild(menuitem);
            }
        }
        for(var i = 0, len = userChrome_js.overlays.length; i < len; i++){
          var script = userChrome_js.overlays[i];
          if(script.dir != dirName) continue;
            if(flg){
              menuseparator = document.createElement('menuseparator');
              menupopup.appendChild(menuseparator);
            }
            flg = false;
            menuitem = document.createElement('menuitem');
            menuitem.setAttribute('label',script.filename);
            menuitem.setAttribute('oncommand','userChromejs.chgScriptStat(this.script.filename);');
            menuitem.setAttribute('onclick','if(event.button != 0) {event.stopPropagation();event.preventDefault();userChromejs.clickScriptMenu(event);}');
            menuitem.setAttribute('type','checkbox');
            menuitem.setAttribute('autocheck','false');
            menuitem.setAttribute('checked',!userChrome_js.scriptDisable[script.filename] );

            let url = this.getScriptHomeURL(script);
            if (url)
              menuitem.setAttribute('homeURL', url);
            let description = getTooltiptext(script, url);
            if(description)
              menuitem.setAttribute('tooltiptext', description);

            menuitem.script = script;
            if (dirName === 'root') {
              menuitem.setAttribute('class','userChromejs_script');
              topMenuitems.push(menuitem);
            } else {
              menupopup.appendChild(menuitem);
            }
        }
        menu.appendChild(menupopup);
        parentMenuPopup.appendChild(menu);
      }

      // 添加收集的 topMenuitems
      topMenuitems.forEach(function(menuitem){
        parentMenuPopup.appendChild(menuitem);
      });

      document.getElementById("showToolsMenu").setAttribute("label", (userChromejs.ShowToolButton ? "切换到菜单栏-工具" : "切换到按钮"));
    },

    clickDirMenu: function(event){
      if(event.button == 1 || event.button == 2){
        userChromejs.chgDirStat(event.target.dirName);
        if(event.target.firstChild && event.target.firstChild.firstChild)
          event.target.firstChild.firstChild.setAttribute('checked',!userChrome_js.dirDisable[event.target.dirName] );
        if(!!userChrome_js.dirDisable[event.target.dirName])
          event.target.setAttribute('style', 'font-style:italic;');
        else
          event.target.removeAttribute('style');
      }
    },

    clickDirMenuitem: function(event,stop){
      if(event.button == 1 || event.button == 2){
        userChromejs.chgDirStat(event.target.dirName);
        event.target.setAttribute('checked',!userChrome_js.dirDisable[event.target.dirName] );
        if(!stop && !!userChrome_js.dirDisable[event.target.dirName])
          event.target.parentNode.parentNode.setAttribute('style', 'font-style:italic;');
        else
          event.target.parentNode.parentNode.removeAttribute('style');
      }
    },

    clickScriptMenu: function(event){
      let script = event.target.script;
      if (!script) return;

      if(event.button==1){
        if (event.ctrlKey) {  // 中键：连续启用禁用多个脚本
          let url = event.target.getAttribute('homeURL');
          if (url) {
            gBrowser.addTab(url);
          }
        } else {  // Ctrl + 中键：打开主页
          userChromejs.chgScriptStat(script.filename);
          event.target.setAttribute('checked',!userChrome_js.scriptDisable[script.filename] );
        }
      }else if(event.button==2){
        if (event.ctrlKey) {
          userChromejs.script.uninstall(script);
        } else {
          userChromejs.launchEditor(script);
        }
      }
    },

    getScriptHomeURL: function(script) {
      return script.homepageURL || script.downloadURL || script.updateURL || script.reviewURL;
    },

    launchEditor: function(aScript){
      //dannylee
      userChromejs.editor = gPrefService.getCharPref("view_source.editor.path");
      var editor = userChromejs.editor;

      // 用 Scratchpad 编辑
      if (!editor) {
        userChromejs.openScriptInScratchpad(window, aScript.file);
        return;
      }

      var UI = Components.classes['@mozilla.org/intl/scriptableunicodeconverter'].createInstance(Components.interfaces.nsIScriptableUnicodeConverter);

      var platform = window.navigator.platform.toLowerCase();
      if(platform.indexOf('win') > -1){
        UI.charset = 'GB2312';
      }else{
        UI.charset =  'UTF-8';
      }

      var path = Components.classes['@mozilla.org/network/io-service;1'].getService(Components.interfaces.nsIIOService).getProtocolHandler('file').QueryInterface(Components.interfaces.nsIFileProtocolHandler).getFileFromURLSpec(aScript.url).path
      path = UI.ConvertFromUnicode(path);

      var appfile = Components.classes['@mozilla.org/file/local;1'].createInstance(Components.interfaces.nsILocalFile);
      appfile.initWithPath(editor);
      var process = Components.classes['@mozilla.org/process/util;1'].createInstance(Components.interfaces.nsIProcess);
      process.init(appfile);
      process.run(false, [path], 1, {});
    },
    openScriptInScratchpad: function (parentWindow, file) {
      let spWin = (parentWindow.Scratchpad
          || Services.wm.getMostRecentWindow("navigator:browser").Scratchpad)
          .openScratchpad();

      spWin.addEventListener("load", function spWinLoaded() {
        spWin.removeEventListener("load", spWinLoaded, false);

        let Scratchpad = spWin.Scratchpad;
        Scratchpad.setFilename(file.path);
        Scratchpad.addObserver({
          onReady: function() {
            Scratchpad.removeObserver(this);
            Scratchpad.importFromFile.call(Scratchpad, file);
          }
        });
      }, false);
    },

    chgDirStat: function(adirName){
      var s = userChromejs.getPref("userChrome.disable.directory", "str", "");
      if(!userChrome_js.dirDisable[adirName]){
        s = (s+',').replace(adirName+',','') + adirName+',';
      }else{
        s = (s+',').replace(adirName+',','');
      }
      s = s.replace(/,,/g,',').replace(/^,/,'');
      userChromejs.setPref("userChrome.disable.directory", "str", s);
      userChrome_js.dirDisable = this.restoreState(s.split(','));
    },

    chgScriptStat: function(afilename){
      var s = userChromejs.getPref("userChrome.disable.script", "str", "");
      if(!userChrome_js.scriptDisable[afilename]){
        s = (s+',').replace(afilename+',','') + afilename+',';
      }else{
        s = (s+',').replace(afilename+',','');
      }
      s = s.replace(/,,/g,',').replace(/^,/,'');
      userChromejs.setPref("userChrome.disable.script", "str", s);
      userChrome_js.scriptDisable = this.restoreState(s.split(','));
    },

    restoreState: function (arr){
      var disable = [];
      for(var i = 0,len = arr.length; i < len; i++)
        disable[arr[i]] = true;
      return disable;
    },

    //prefを読み込み
    getPref: function(aPrefString, aPrefType, aDefault){
      var xpPref = Components.classes['@mozilla.org/preferences-service;1']
                    .getService(Components.interfaces.nsIPrefBranch2);
      try{
        switch (aPrefType){
          case 'complex':
            return xpPref.getComplexValue(aPrefString, Components.interfaces.nsILocalFile); break;
          case 'str':
            return unescape(xpPref.getCharPref(aPrefString).toString()); break;
          case 'int':
            return xpPref.getIntPref(aPrefString); break;
          case 'bool':
          default:
            return xpPref.getBoolPref(aPrefString); break;
        }
      }catch(e){
      }
      return aDefault;
    },
    //prefを書き込み
    setPref: function(aPrefString, aPrefType, aValue){
      var xpPref = Components.classes['@mozilla.org/preferences-service;1']
                    .getService(Components.interfaces.nsIPrefBranch2);
      try{
        switch (aPrefType){
          case 'complex':
            return xpPref.setComplexValue(aPrefString, Components.interfaces.nsILocalFile, aValue); break;
          case 'str':
            return xpPref.setCharPref(aPrefString, escape(aValue)); break;
          case 'int':
            aValue = parseInt(aValue);
            return xpPref.setIntPref(aPrefString, aValue);  break;
          case 'bool':
          default:
            return xpPref.setBoolPref(aPrefString, aValue); break;
        }
      }catch(e){
      }
      return null;
    },
    // 監視を開始する
    addPrefListener: function(aObserver) {
        try {
            var pbi = Components.classes['@mozilla.org/preferences;1']
                      .getService(Components.interfaces.nsIPrefBranch2);
            pbi.addObserver(aObserver.domain, aObserver, false);
        } catch(e) {}
    },

    // 監視を終了する
    removePrefListener: function(aObserver) {
        try {
            var pbi = Components.classes['@mozilla.org/preferences;1']
                      .getService(Components.interfaces.nsIPrefBranch2);
            pbi.removeObserver(aObserver.domain, aObserver);
        } catch(e) {}
    },

    readLaterPrefListener:{
        domain  : 'userChrome.disable',
            //"userChrome.disable"という名前の設定が変更された場合全てで処理を行う

        observe : function(aSubject, aTopic, aPrefstring) {
            if (aTopic == 'nsPref:changed') {
                // 設定が変更された時の処理
                setTimeout(function(){
                  var s = userChromejs.getPref("userChrome.disable.directory", "str", "");
                  userChrome_js.dirDisable = userChromejs.restoreState(s.split(','));
                  s = userChromejs.getPref("userChrome.disable.script", "str", "");
                  userChrome_js.scriptDisable = userChromejs.restoreState(s.split(','));
                }, 0);
            }
        }
    },

    restartApp: function() {
      const appStartup = Components.classes["@mozilla.org/toolkit/app-startup;1"]
                        .getService(Components.interfaces.nsIAppStartup);

      // Notify all windows that an application quit has been requested.
      var os = Components.classes["@mozilla.org/observer-service;1"]
                         .getService(Components.interfaces.nsIObserverService);
      var cancelQuit = Components.classes["@mozilla.org/supports-PRBool;1"]
                                 .createInstance(Components.interfaces.nsISupportsPRBool);
      os.notifyObservers(cancelQuit, "quit-application-requested", null);

      // Something aborted the quit process.
      if (cancelQuit.data)
        return;

      // Notify all windows that an application quit has been granted.
      os.notifyObservers(null, "quit-application-granted", null);

      // Enumerate all windows and call shutdown handlers
      var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
                         .getService(Components.interfaces.nsIWindowMediator);
      var windows = wm.getEnumerator(null);
      var win;
      while (windows.hasMoreElements()) {
        win = windows.getNext();
        if (("tryToClose" in win) && !win.tryToClose())
          return;
      }
      let XRE = Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime);
      if (typeof XRE.invalidateCachesOnRestart == "function")
        XRE.invalidateCachesOnRestart();
      appStartup.quit(appStartup.eRestart | appStartup.eAttemptQuit);
    },
    
    //dannylee
    toggleUI: function(tag){
      if (tag > 0) {
        gPrefService.setBoolPref(this.UIPREF, !gPrefService.getBoolPref(this.UIPREF));
      }
      userChromejs.ShowToolButton = gPrefService.getBoolPref(userChromejs.UIPREF);
      window.setTimeout(function() { 
        document.getElementById("userChromejs_Tools_Menu").hidden = userChromejs.ShowToolButton;
        document.getElementById("userChromebtnMenu").hidden = !userChromejs.ShowToolButton;
        if (!userChromejs.ShowToolButton) {
          document.getElementById("userChromejs_Tools_Menu").appendChild(document.getElementById("userChromejs_options"));
          if (userChromejs.getPref("userChrome.enable.uerHomebutton",'bool',false)) {
            if (userChromejs.moveTohomebtn(true)) {
              document.getElementById("userChrome_homebtn").setAttribute("disabled", true);
            }
          }
        } else {
          document.getElementById("userChromebtnMenu").appendChild(document.getElementById("userChromejs_options"));
          if (userChromejs.getPref("userChrome.enable.uerHomebutton",'bool',false)) {
            if (userChromejs.moveTohomebtn(false)) {
              document.getElementById("userChrome_homebtn").setAttribute("disabled", false);
            }
          }
        }
      }, 10);
    },
    
    moveTohomebtn: function(mode){
      var homebtn = document.getElementById("home-button");
      if (!homebtn)
        return false;
      var menupop = document.getElementById("userChromejs_options");
      var menuend = document.getElementById("settingseparator");
      if (mode) {
        if (homebtn.getAttribute("type") == "menu-button" || homebtn.getAttribute("type") == "menu") //maybe another UC scripts
          return false;
        else {
          homebtn.setAttribute("type", "menu-button");
          var click = homebtn.getAttribute("onclick");
          userChromejs.homebtnclick = click;
          homebtn.setAttribute("onclick",
                              "if (event.button == 0) {" + click + "}");
          var homepop = document.createElement("menupopup");
          homepop.setAttribute("id", "home-button-popup");
          homepop.setAttribute("onpopupshowing", "userChromejs.onpopup();");
          homebtn.appendChild(homepop);
          var cmdmenues = [];
          cmdmenues = userChromejsScriptOptionsMenu.Menu.get();
          var i = 0;
          while (i < cmdmenues.length) {
          	if (cmdmenues[i].indexOf("@clone_") == -1)
              var menu = document.getElementById(cmdmenues[i]);
            else {
              var menu = document.getElementById("clone_" + cmdmenues[i].substring(7));
            }
            if (menu) {
              setTimeout(function(menupopup, menu){ 
                       menupopup.appendChild(menu);
                     }, 100, homepop, menu);
              cmdmenues.splice(i, 1);
              continue;
            }
            i++;
          }
          var vmenu = document.getElementById("jscmdseparator");
          setTimeout(function(menupopup, menu){ 
                       menupopup.appendChild(menu);
                     }, 100, homepop, vmenu);
          vmenu = document.getElementById("userChromejs_script_options_Menu");
          setTimeout(function(menupopup, menu){ 
                       menupopup.appendChild(menu);
                     }, 100, homepop, vmenu);
          menuend.hidden = true;
          return true;
        }
      }else{
        if (homebtn.getAttribute("type") != "menu-button") 
          return false;
        else {
          var homepop = document.getElementById("home-button-popup");
          var mmenu = homepop.firstChild;
          while(mmenu){
            menupop.insertBefore(mmenu, menuend);
            mmenu = homepop.firstChild;
          }
          menuend.hidden = false;
          homebtn.removeChild(homepop);
          homebtn.setAttribute("type", null);
          homebtn.setAttribute("onclick", userChromejs.homebtnclick);
          userChromejs.homebtnclick = null;
          return true;
        }
      }
    },
    
    setEditor: function(){
      var fp = Components.classes['@mozilla.org/filepicker;1']
                .createInstance(Components.interfaces.nsIFilePicker);
      fp.init(window, "设置全局脚本编辑器", fp.modeOpen);
      fp.appendFilter("执行文件","*.exe");
      if ( fp.show() == fp.returnCancel || !fp.file ) 
         return;
      else {
        var ss = fp.file.path;
        // userChromejs.editor = ss.replace(/\\/g, "\\\\");
        userChromejs.editor = ss;
        gPrefService.setCharPref("view_source.editor.path", userChromejs.editor);
        return ss;
      }
    }
  }

  //メニューが長くなりすぎるので, あまり使わないメニューを"userChrome.jsの各スクリプトの設定"の下に移動させる
  var userChromejsScriptOptionsMenu = {
    //dannylee
    UIMENU: "userChromeJS.rebuildUI.menues",
    //あまり使わないメニューのリスト
    menues: [
      "wordhighlight-toolbar-menuitem",  // WordHighlightToolbar.uc.js
      // "JSCSS-menuitem", // js、css、ahk 代码着色
      "addMenu-rebuild", // addMenu 的重新载入配置
    ],
    Menu: {
      get: function() {
        var menuStr = gPrefService.getCharPref(userChromejsScriptOptionsMenu.UIMENU).trim();
        if (menuStr.indexOf(',') != -1) {  // 转换以前的写法
          menuStr = menuStr.replace(/,\s*/g, '\n');
          userChromejsScriptOptionsMenu.Menu.set(menuStr);
        }
        return menuStr.split(/\n+/).map(function(s) s.trim());
      },
      set: function(menues) {
        if (Array.isArray(menues)) {
          menues = menues.join("\n");
        }
        gPrefService.setCharPref(userChromejsScriptOptionsMenu.UIMENU, menues);
      },
      has: function() {
        return gPrefService.prefHasUserValue(userChromejsScriptOptionsMenu.UIMENU);
      }
    },

    interval: 500, //0.5秒間隔
    maxcount: 50,   //最大50回までトライ
    count: 0,
    timer: null,

    run: function() {
      if (!this.Menu.has()) {
        this.Menu.set(this.menues);
      }
      this.menues = this.Menu.get();
      this.count = 0;
      
      userChromejs.toggleUI(0);

      //DOMの構築が完了するのを待ってからメニューを移動させる(5秒間隔で最大50回までトライ)
      this.timer = setInterval(function(self){
        if (++self.count > self.maxcount || self.moveMenu()) {
          clearInterval(self.timer);
          // userChromejs.toggleUI(0);
        }
      }, this.interval, this);
    },

    moveMenu: function(){
      var menupopup = document.getElementById('userChromejs_options');//userChromejs_script_options
      var menubefore = document.getElementById('jscmdseparator');
      if (!menupopup)
        return false;

      var i = 0;
      while (i < this.menues.length) {
      	if (this.menues[i].indexOf("@clone_") == -1)
          var menu = document.getElementById(this.menues[i]);
        else {
          var menu = document.getElementById(this.menues[i].substring(7));
          if (menu) {
            menu = menu.cloneNode(true);
            menu.setAttribute("id", "clone_" + this.menues[i].substring(7));
          }
        }
        if (menu) {
          setTimeout(function(menupopup, menu, menubefore){ 
                       menupopup.insertBefore(menu, menubefore);
                       if (menubefore.getAttribute("hidden"))
                          menubefore.setAttribute("hidden", false);
                     }, 100, menupopup, menu, menubefore);
          this.menues.splice(i, 1);
          continue;
        }
        i++;
      }

      return this.menues.length == 0 ? true : false;
    },
    
    //dannylee
    resetMenu: function(evt){
      if (evt.button == 0) return;
      // 不作用于按钮弹出菜单上
      if (evt.target.id != 'userChromebtnMenu' && evt.target.id != 'jscmd_edit_add') return;
      var currentList = userChromejsScriptOptionsMenu.Menu.get();
      if (evt.button == 1) {
        userChromejsScriptOptionsMenu.deluserChromejsmenu();
      } else if (evt.button == 2) {
        evt.stopPropagation();
        evt.preventDefault();
        userChromejsScriptOptionsMenu.adduserChromejsmenu();
      }
    },
    
    adduserChromejsmenu: function(){
        var currentList = userChromejsScriptOptionsMenu.Menu.get();
        var prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
                        .getService(Components.interfaces.nsIPromptService);
        var check = {value: false};                  
        var input = {value: ""}; 
        var result = prompts.prompt(null, "userChromejs脚本管理器", "添加新的脚本命令(menu或menuitem)ID:", input, "克隆模式", check);
        if(!result) return;                 
        //var nMenu = window.prompt('添加新的脚本命令ID:','');
        var nMenu = input.value;
        if(!nMenu) return;
        nMenu = nMenu.trim();
        if(nMenu == "") return;
        var nItem = document.getElementById(nMenu);
        if (!nItem) return;
        if (nItem.localName != "menuitem" && nItem.localName != "menu") return;
        if (nItem.parentNode.getAttribute("id") == "userChromejs_options") return;  //userChromejs_script_options
        if (check.value) {
          nItem = nItem.cloneNode(true);
          nItem.removeAttribute('key');
          nMenu = "@clone_" + nMenu;
        }
        if (userChromejs.getPref("userChrome.enable.uerHomebutton",'bool',false) 
             && document.getElementById("home-button").getAttribute("type") == "menu-button")
          var menupopup = document.getElementById('home-button-popup');
        else
          var menupopup = document.getElementById('userChromejs_options'); 

        currentList.push(nMenu);
        userChromejsScriptOptionsMenu.Menu.set(currentList);
 
        var menubefore = document.getElementById('jscmdseparator');
        setTimeout(function(menupopup, menu ,menubefore){
                     menupopup.insertBefore(menu, menubefore);
                     if (menubefore.getAttribute("hidden"))
                        menubefore.setAttribute("hidden", false);
                   }, 100, menupopup, nItem, menubefore);
    },
    
    deluserChromejsmenu: function(){
        var items = userChromejsScriptOptionsMenu.Menu.get();
        if (items.length === 0) return;
        var prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].getService(Components.interfaces.nsIPromptService);
        var uselected = {};  
        var result = prompts.select(null, "userChromejs脚本管理器", "选择需要删除的UC脚本命令：", items.length, items, uselected); 
        if (result) {
          items.splice(uselected.value, 1);
          userChromejsScriptOptionsMenu.Menu.set(items);

          prompts.alert(null, "userChromejs脚本管理器", "删除成功，重启后生效！");
        }
    }
  }

  ]]></script>

<script type="application/javascript" src="chrome://userchromejs/content/script/utils.js"></script>
<script type="application/javascript" src="chrome://userchromejs/content/script/SaveScript.js"></script>

<toolbarpalette id="addon-bar">
	<toolbarbutton id="userChromebtnMenu" label="UC脚本管理器" 
                 class="toolbarbutton-1 chromeclass-toolbar-additional" type="menu" removable="true"
                 tooltiptext="UC脚本管理器(右键添加脚本命令，中键删除脚本命令)" popup="userChromejs_options" 
                 onclick="userChromejsScriptOptionsMenu.resetMenu(event);" >
    <menupopup id="userChromejs_options"  onpopupshowing="userChromejs.onpopup();">
    	<menuseparator id="jscmdseparator" hidden="true" />
      <hbox>
      	<menuitem id="toolbtn_chromedir" class="menuitem-iconic" label="打开chrome文件夹" flex="1" oncommand="userChromejs.Openchromedir();"/>
      	<toolbarbutton id="toolbtn_restartApp" tooltiptext="重启浏览器" oncommand="hidePopup(); userChromejs.restartApp();"/>
      </hbox>
      <hbox>
        <menuitem class="menuitem-iconic" label="管理uc脚本" flex="1" oncommand="userChromejs.openChromeURL('index.html');"/>
        <toolbarbutton id="toolbtn_openPrefs" tooltiptext="打开设置窗口" oncommand="hidePopup(); userChromejs.openPrefs();"/>
      </hbox>
      <menu id="userChromejs_script_setting" label="其它设置" >
        <menupopup >
          <menuitem id="toolbtn_rebuild" class="menuitem-iconic" label="新建窗口并重载脚本" flex="1" oncommand="userChromejs.rebuild();"/>
          <hbox>
            <menuitem id="jscmd_edit_add" class="menuitem-iconic" label="添加脚本命令" flex="1" oncommand="userChromejsScriptOptionsMenu.adduserChromejsmenu();"/>
              <toolbarbutton id="jscmd_edit_del" tooltiptext="删除脚本命令" oncommand="hidePopup(); userChromejsScriptOptionsMenu.deluserChromejsmenu();"/>
          </hbox>
          <hbox>
            <menuitem id="showToolsMenu" label="切换到工具菜单" class="menuitem-iconic" oncommand="userChromejs.toggleUI(1);" flex="1" tooltiptext="新菜单在菜单栏的工具菜单中，再次点击后切换回按钮" />
            <checkbox id="userChrome_homebtn"  label="移动菜单" tooltiptext="切换到工具菜单时将脚本命令和脚本目录菜单移动到火狐主页按钮" oncommand="userChromejs.settingHomeMode();" />
          </hbox>
        </menupopup>
      </menu>

      <menuseparator id="userChromejs_script_options" />

    </menupopup>
  </toolbarbutton>                           
</toolbarpalette>
</overlay>
